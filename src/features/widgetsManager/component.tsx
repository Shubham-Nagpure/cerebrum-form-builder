import { widgets } from './WidgetsConfig';

interface IComponent {
  name: string;
  id: string;
  autogenerated: boolean;
}

interface IActions {
  handle: string;
  displayName: string;
  params?: unknown[];
}

export interface IWidget {
  name?: string;
  displayName?: string;
  description?: string;
  component?: string;
  defaultSize?: {
    width?: number;
    height?: number;
  };
  properties?: object;
  defaultChildren?: object;
  general?: {
    tooltip?: {
      type?: string;
      displayName?: string;
      validation: { schema: { type?: string } };
    };
  };
  others?: object;
  events:
    | {
        onClick?: {
          displayName: string;
        };
        onHover?: {
          displayName: string;
        };
        onRowHovered?: {
          displayName: string;
        };
        onRowClicked?: {
          displayName: string;
        };
        onBulkUpdate?: {
          displayName: string;
        };
        onPageChanged?: {
          displayName: string;
        };
        onSearch?: {
          displayName: string;
        };
        onCancelChanges?: {
          displayName: string;
        };
        onSort?: {
          displayName: string;
        };
        onCellValueChanged?: {
          displayName: string;
        };
        onFilterChanged?: {
          displayName: string;
        };
        onNewRowsAdded?: {
          displayName: string;
        };
        onSubmit?: {
          displayName: string;
        };
        onInvalid?: {
          displayName: string;
        };
      }
    | [];
  styles?: object;
  validate?: boolean;
  generalStyles?: {
    boxShadow?: { type?: string; displayName?: string };
  };
  definition?: {
    others?: object;
    events?: object;
    styles?: object;
    generalStyles?: {
      boxShadow: { value?: string };
    };
    properties?: {
      title?: {
        value: string;
      };
      visible?: {
        value: string;
      };
      data?: {
        value: string;
      };
      useDynamicColumn?: {
        value: string;
      };
      columnData?: {
        value: string;
      };
      rowsPerPage?: {
        value: string;
      };
      serverSidePagination?: {
        value: string;
      };
      enableNextButton?: {
        value: string;
      };
      enablePrevButton?: {
        value: string;
      };
      totalRecords?: {
        value: string;
      };
      clientSidePagination?: {
        value: string;
      };
      serverSideSort?: {
        value: string;
      };
      serverSideFilter?: {
        value: string;
      };
      displaySearchBox?: {
        value: string;
      };
      showDownloadButton?: {
        value: string;
      };
      showFilterButton?: {
        value: string;
      };
      autogenerateColumns?: {
        value: boolean;
        generateNestedColumns: boolean;
      };
      columns?: {
        value: IComponent[];
      };
      showBulkUpdateActions?: {
        value: string;
      };
      showBulkSelector?: {
        value: string;
      };
      highlightSelectedRow?: {
        value: string;
      };
      columnSizes?: {
        value: string;
      };
      actions?: {
        value: [];
      };
      enabledSort?: {
        value: string;
      };
      hideColumnSelectorButton?: {
        value: string;
      };
      defaultSelectedRow?: {
        value: string;
      };
      showAddNewRowButton?: {
        value: string;
      };
      allowSelection?: {
        value: string;
      };
      text?: {
        value: string;
      };
      loadingState?: {
        value: string;
      };
      advanced?: {
        value: string;
      };
      JSONSchema?: {
        value: string;
      };
    };
  };
  exposedVariables?: object;
  actions?: IActions[];
}

const universalProps: IWidget = {
  properties: {},
  general: {
    tooltip: {
      type: 'code',
      displayName: 'Tooltip',
      validation: { schema: { type: 'string' } }
    }
  },
  others: {},
  events: {},
  styles: {},
  validate: true,
  generalStyles: {
    boxShadow: { type: 'boxShadow', displayName: 'Box Shadow' }
  },
  definition: {
    others: {},
    events: [],
    styles: {},
    generalStyles: {
      boxShadow: { value: '0px 0px 0px 0px #00000040' }
    }
  },
  exposedVariables: {}
};

const combineProperties = (widget: IWidget, universal: IWidget): IWidget => {
  return {
    ...universal,
    ...widget,
    properties: { ...universal.properties, ...widget.properties },
    general: { ...universal.general, ...widget.general },
    others: { ...universal.others, ...widget.others },
    events:
      Array.isArray(universal.events) && Array.isArray(widget.events)
        ? [...universal.events, ...widget.events]
        : { ...universal.events, ...widget.events },
    styles: { ...universal.styles, ...widget.styles },
    generalStyles: { ...universal.generalStyles, ...widget.generalStyles },
    exposedVariables: {
      ...universal.exposedVariables,
      ...widget.exposedVariables
    }
  };
};

export const IComponentTypes: IWidget[] = widgets?.map(widget => {
  return {
    ...combineProperties(widget, universalProps)
    // definition: combineProperties(IWidget.definition, universalProps.definition, true)
  };
});
